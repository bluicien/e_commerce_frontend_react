/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import { useRef, useEffect, useCallback } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { ReactThreeFiber, useFrame, useThree } from '@react-three/fiber';
import { a } from '@react-spring/three'; 
import earthScene from '../assets/3d/earth.glb';

type GLTFResult = GLTF & {
    nodes: {
        Earth_Diffuse_6K_1: THREE.Mesh
        Earth_Diffuse_6K_2: THREE.Mesh
    }
    materials: {
        Earth_Diffuse_6K: THREE.MeshStandardMaterial
        Material: THREE.MeshStandardMaterial
    }
}

// type ActionName = 'Earth_Diffuse_6KAction.001'
// type GLTFActions = Record<ActionName, THREE.AnimationAction>
type MouseOrTouchOrPointerEvent = MouseEvent | TouchEvent | PointerEvent;

interface EarthProps extends ReactThreeFiber.Object3DNode<THREE.Group, typeof THREE.Group> {
    isRotating: boolean; 
    setIsRotating: (value: boolean) => void;
}

export default function Earth({isRotating, setIsRotating, ...props}: EarthProps) {

    const { gl, viewport } = useThree();

    const lastX = useRef(0);
    const rotationSpeed = useRef(0);
    const dampingFactor = 0.95;

    
    const earthRef = useRef<THREE.Group | null>(null)
    const { nodes, materials, animations } = useGLTF(earthScene) as GLTFResult
    const { actions } = useAnimations(animations, earthRef)

    
    const handlePointerDown = useCallback((e: MouseOrTouchOrPointerEvent) => {
            e.stopPropagation();
            e.preventDefault();
            setIsRotating(true);
    
            const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX;
            lastX.current = clientX;
    }, [setIsRotating])

    const handlePointerUp = useCallback((e: MouseOrTouchOrPointerEvent) => {
            e.stopPropagation();
            e.preventDefault();
            setIsRotating(false);
    }, [setIsRotating]);

    const handlePointerMove = useCallback((e: MouseOrTouchOrPointerEvent) => {
        e.stopPropagation();
        e.preventDefault();

        if (isRotating) {
            const clientX: number = 'touches' in e ? e.touches[0]?.clientX ?? 0 : (e as MouseEvent).clientX;
            const delta: number = (clientX - lastX.current) / viewport.width;
    
            if (earthRef.current) {
                earthRef.current.rotation.y += delta * 0.01 * Math.PI;
                lastX.current = clientX;
                rotationSpeed.current= delta * 0.01 * Math.PI;
            }
        }
    }, [isRotating, viewport.width]);
    
    useFrame(() => {
        if(!isRotating) {
            rotationSpeed.current *= dampingFactor;
            if (Math.abs(rotationSpeed.current) < 0.001) {
                rotationSpeed.current = 0;
            }
        }
    })

    useEffect(() => {
        const canvas = gl.domElement;
        document.addEventListener('pointerup', handlePointerUp);
        canvas.addEventListener('pointerdown', handlePointerDown);
        document.addEventListener('pointermove', handlePointerMove);
        
        return () => {
            document.removeEventListener('pointerup', handlePointerUp);
            canvas.removeEventListener('pointerdown', handlePointerDown);
            document.removeEventListener('pointermove', handlePointerMove);
        }
    }, [gl, handlePointerUp, handlePointerDown, handlePointerMove])

    useEffect(() => {
        if (actions && actions['Earth_Diffuse_6KAction.001']) {
            if (!isRotating) {
                actions['Earth_Diffuse_6KAction.001']?.play();
            } else {
                actions['Earth_Diffuse_6KAction.001']?.stop();
            }
        }
        }, [actions, isRotating])

    return (
        <a.group ref={earthRef} {...props}>
            <a.group name="Scene">
                <a.group name="Earth_Diffuse_6K">
                <mesh
                    name="Earth_Diffuse_6K_1"
                    // castShadow
                    // receiveShadow
                    geometry={nodes.Earth_Diffuse_6K_1.geometry}
                    material={materials.Earth_Diffuse_6K}
                />
                {/* <mesh
                    name="Earth_Diffuse_6K_2"
                    // castShadow
                    // receiveShadow
                    geometry={nodes.Earth_Diffuse_6K_2.geometry}
                    material={materials.Material}
                /> */}
                </a.group>
            </a.group>
        </a.group>
    )
}

useGLTF.preload('/earth.glb')